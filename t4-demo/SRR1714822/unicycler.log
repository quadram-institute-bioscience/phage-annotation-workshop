
Starting Unicycler (2021-10-22 09:01:22)
----------------------------------------
    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you provided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig length and graph connectivity, and scaffold the graph using SPAdes repeat resolution.
    For more information, please see https://github.com/rrwick/Unicycler

Command: /mnt/disk/miniconda3/bin/unicycler -t 1 -1 /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/scripts/../t4-demo//SRR1714822_1.fastq.gz -2 /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/scripts/../t4-demo//SRR1714822_2.fastq.gz -o /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/scripts/../t4-demo//SRR1714822/

Unicycler version: v0.4.4
Using 1 thread

Making output directory:
  /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822

Dependencies:
  Program         Version             Status  
  spades.py       3.13.1              good    
  racon                               not used
  makeblastdb     2.12.0+             good    
  tblastn         2.12.0+             good    
  bowtie2-build   2.4.2               good    
  bowtie2         2.4.2               good    
  samtools        1.12                good    
  java            1.8.0_152-release   good    
  pilon           1.24                good    
  bcftools                            not used


SPAdes read error correction (2021-10-22 09:01:53)
--------------------------------------------------
    Unicycler uses the SPAdes read error correction module to reduce the number of errors in the short read before SPAdes assembly. This can make the assembly faster and simplify the assembly graph structure.

Command: /mnt/disk/miniconda3/bin/spades.py -1 /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822_1.fastq.gz -2 /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822_2.fastq.gz -o /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/spades_assembly/read_correction --threads 1 --only-error-correction

Corrected reads:
  /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/spades_assembly/corrected_1.fastq.gz
  /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/spades_assembly/corrected_2.fastq.gz


Choosing k-mer range for assembly (2021-10-22 10:03:48)
-------------------------------------------------------
    Unicycler chooses a k-mer range for SPAdes based on the length of the input reads. It uses a wide range of many k-mer sizes to maximise the chance of finding an ideal assembly.

Median read length: 250
K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127


SPAdes assemblies (2021-10-22 10:04:03)
---------------------------------------
    Unicycler now uses SPAdes to assemble the short reads. It scores the assembly graph for each k-mer using the number of contigs (fewer is better) and the number of dead ends (fewer is better). The score function is 1/(c*(d+2)), where c is the contig count and d is the dead end count.

K-mer   Contigs   Dead ends   Score   
   27                           failed
   47                           failed
   63                           failed
   77                           failed
   89                           failed
   99                           failed
  107                           failed
  115                           failed
  121                           failed
  127     2,171       4,322   1.07e-07 <-best

Deleting /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/spades_assembly/


Determining graph multiplicity (2021-10-22 11:07:12)
----------------------------------------------------
    Multiplicity is the number of times a sequence occurs in the underlying sequence. Single-copy contigs (those with a multiplicity of one, occurring only once in the underlying sequence) are particularly useful.

Saving /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/001_best_spades_graph.gfa


Cleaning graph (2021-10-22 11:07:12)
------------------------------------
    Unicycler now performs various cleaning procedures on the graph to remove overlaps and simplify the graph structure. The end result is a graph ready for bridging.

Graph overlaps removed

Removed zero-length segments:
    2170, 2171

Saving /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/002_overlaps_removed.gfa

    Unicycler now selects a set of anchor contigs from the single-copy contigs. These are the contigs which will be connected via bridges to form the final assembly.

1,428 anchor segments (809,491 bp) out of 2,169 total segments (1,002,641 bp)


Creating SPAdes contig bridges (2021-10-22 11:07:12)
----------------------------------------------------
    SPAdes uses paired-end information to perform repeat resolution (RR) and produce contigs from the assembly graph. SPAdes saves the graph paths corresponding to these contigs in the contigs.paths file. When one of these paths contains two or more anchor contigs, Unicycler can create a bridge from the path.

No SPAdes contig bridges


Creating loop unrolling bridges (2021-10-22 11:07:12)
-----------------------------------------------------
    When a SPAdes contig path connects an anchor contig with the middle contig of a simple loop, Unicycler concludes that the sequences are contiguous (i.e. the loop is not a separate piece of DNA). It then uses the read depth of the middle and repeat contigs to guess the number of times to traverse the loop and makes a bridge.

No loop unrolling bridges made
none found


Applying bridges (2021-10-22 11:07:12)
--------------------------------------
    Unicycler now applies to the graph in decreasing order of quality. This ensures that when multiple, contradictory bridges exist, the most supported option is used.

Bridge type   Start -> end   Path   Quality

Saving /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/003_bridges_applied.gfa


Bridged assembly graph (2021-10-22 11:07:13)
--------------------------------------------
    The assembly is now mostly finished and no more structural changes will be made. Ideally the assembly graph should now have one contig per replicon and no erroneous contigs (i.e a complete assembly). If there are more contigs, then the assembly is not complete.

Saving /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/004_final_clean.gfa

Component   Segments   Links   Length    N50       Longest segment   Status    
    total         33       4   212,942   168,920           168,920             
        1          3       4   168,922   168,920           168,920   incomplete
        2          1       0     4,412     4,412             4,412   incomplete
        3          1       0     2,671     2,671             2,671   incomplete
        4          1       0     2,426     2,426             2,426   incomplete
        5          1       0     2,152     2,152             2,152   incomplete
        6          1       0     1,920     1,920             1,920   incomplete
        7          1       0     1,868     1,868             1,868   incomplete
        8          1       0     1,510     1,510             1,510   incomplete
        9          1       0     1,490     1,490             1,490   incomplete
       10          1       0     1,424     1,424             1,424   incomplete
       11          1       0     1,399     1,399             1,399   incomplete
       12          1       0     1,326     1,326             1,326   incomplete
       13          1       0     1,305     1,305             1,305   incomplete
       14          1       0     1,276     1,276             1,276   incomplete
       15          1       0     1,263     1,263             1,263   incomplete
       16          1       0     1,215     1,215             1,215   incomplete
       17          1       0     1,193     1,193             1,193   incomplete
       18          1       0     1,171     1,171             1,171   incomplete
       19          1       0     1,162     1,162             1,162   incomplete
       20          1       0     1,157     1,157             1,157   incomplete
       21          1       0     1,151     1,151             1,151   incomplete
       22          1       0     1,118     1,118             1,118   incomplete
       23          1       0     1,103     1,103             1,103   incomplete
       24          1       0     1,077     1,077             1,077   incomplete
       25          1       0     1,071     1,071             1,071   incomplete
       26          1       0     1,067     1,067             1,067   incomplete
       27          1       0     1,058     1,058             1,058   incomplete
       28          1       0     1,027     1,027             1,027   incomplete
       29          1       0     1,006     1,006             1,006   incomplete
       30          1       0     1,002     1,002             1,002   incomplete
       31          1       0     1,000     1,000             1,000   incomplete


Polishing assembly with Pilon (2021-10-22 11:07:13)
---------------------------------------------------
    Unicycler now conducts multiple rounds of Pilon in an attempt to repair any remaining small-scale errors with the assembly.

Aligning reads to find appropriate insert size range...
Insert size 1st percentile:  263
Insert size 99th percentile: 401

Pilon polish round 1
No Pilon changes

Saving /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/005_polished.gfa


Assembly complete (2021-10-22 12:21:58)
---------------------------------------
Saving /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/assembly.gfa
Saving /usr/users/QIB_fr009/telatina/git/phage-annotation-workshop/t4-demo/SRR1714822/assembly.fasta

